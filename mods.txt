Bootstrap.cs
StartServer:
Core.Init(new Action<string>(Bootstrap.WriteToLog));

=======================================
ConVar.Admin.cs

entid func:
if (@string == "admin_tc")
{
	BuildingPrivlidge buildingPrivlidge = baseEntity as BuildingPrivlidge;
	if (buildingPrivlidge != null)
	{
		buildingPrivlidge.isFreeUpkeep = !buildingPrivlidge.isFreeUpkeep;
		buildingPrivlidge.AddDelayedUpdate();
		arg.ReplyWith(string.Format("{0}: {1}", baseEntity.net.ID, buildingPrivlidge.isFreeUpkeep ? "True" : "False"));
		return;
	}
	arg.ReplyWith("Not a tool cupboard");
	return;
}

=======================================
ConVar.Chat.cs
Edit chat color of admin to default

After new ChatEntry() in say/Broadcast add:
PlayerMods.PublicLog(chatEntry.Username + ": " + chatEntry.Message);

================================================
ConVar.Inventory.cs
Remove server broadcasts for inventory give commands

=======================================
AutoTurret.cs
OnAttacked:
if (!basePlayer || ((!basePlayer.IsAdmin || !RustAsia.System.Variables.AdminNoTarget) && !this.IsAuthed(basePlayer)))

Ignore:
return player.IsAdmin && RustAsia.System.Variables.AdminNoTarget;

IsEntityHostile:
global::BasePlayer basePlayer = ent as global::BasePlayer;
return (!basePlayer || !basePlayer.IsAdmin || !RustAsia.AdminMods.AdminNoTarget) && ent.IsHostile();

			
=======================================
BasePlayer.cs

public bool IsInvisible { get; set; }
public bool ESPOn { get; set; }
public float lastESP { get; set; }
public BuildingGrade.Enum FreeBuildType { get; set; } = BuildingGrade.Enum.Metal;

OnReceiveTick:
RustAsia.AdminMods.TickESP(this);

CanBeLooted:
&& (!this.IsAdmin || !RustAsia.System.Variables.LootableAdmins)

CreateCorpse:
if (!this.IsAdmin || RustAsia.System.Variables.LootableAdmins) { lootableCorpse.TakeFrom... } 

Hurt:
if (this.IsAdmin && !RustAsia.System.Variables.LootableAdmins && (this.IsSleeping() || this.IsWounded()))
{
	return;
}

=======================================
BaseNetworkable.cs
public virtual bool ShouldNetworkTo(global::BasePlayer player)
{
	return RustAsia.AdminMods.ShouldNetworkToTrash(this, player);
}

=======================================
PatrolHelicopterAI.cs
WasAttacked:
if (basePlayer != null && (!basePlayer.IsAdmin || !RustAsia.System.Variables.AdminNoTarget))

ValidStrafeTarget:
return (!ply.IsAdmin || !RustAsia.System.Variables.AdminNoTarget) && !ply.IsNearEnemyBase();

public void UpdateTargetList() - (!basePlayer.IsAdmin || !RustAsia.System.Variables.AdminNoTarget)

=======================================
FlameTurret.cs
CheckTrigger:
&& (!component.IsAdmin || !RustAsia.System.Variables.AdminNoTarget)
		
================================================
Landmine.cs
public void Trigger(BasePlayer ply = null)
{
	if (ply && (!ply.IsAdmin || !RustAsia.System.Variables.AdminNoTarget))
	{
		this.triggerPlayerID = ply.userID;
	}
	if (!ply || !ply.IsAdmin || !RustAsia.System.Variables.AdminNoTarget)
	{
		base.SetFlag(BaseEntity.Flags.Open, true, false, true);
		base.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
	}
}

================================================
GunTrap.cs
CheckTrigger:
&& (!component.IsAdmin || !RustAsia.System.Variables.AdminNoTarget)

=======================================
Planner.cs
CanAffordToPlace:
if (ownerPlayer.IsAdmin && RustAsia.System.Variables.FreeBuild)
{
	return true;
}
	
DoPlacement:
if (RustAsia.System.Variables.FreeBuild && ownerPlayer.IsAdmin)
{
	buildingBlock.SetGrade(ownerPlayer.FreeBuildType);
}
else
{
	buildingBlock.SetGrade(buildingBlock.blockDefinition.defaultGrade.gradeBase.type);
}

PayForPlacement:
if (player.IsAdmin && RustAsia.System.Variables.FreeBuild)
{
	return;
}
	
=======================================
BuildingPrivlidge.cs
public bool isFreeUpkeep { get; set; }

ApplyUpkeepPayment:
if (this.isFreeUpkeep)
{
	return;
}
	
================================================
BuildingBlock.cs
PayForUpgrade:
if (player.IsAdmin && RustAsia.System.Variables.FreeBuild)
{
	return;
}

CanAffordUpgrade:
if (player.IsAdmin && RustAsia.System.Variables.FreeBuild)
{
	return true;
}

================================================
CombatLog.cs
Log:
PlayerMods.LogStats(new CombatEvent(val));